name: Forex AI Analysis

on:
  schedule:
    - cron: '0 */2 * * *'
    - cron: '0 8 * * *'
  workflow_dispatch:
    inputs:
      pairs:
        description: 'جفت ارزها (جدا شده با کاما)'
        required: false
        default: 'EUR/USD,GBP/USD,USD/JPY'
      all_pairs:
        description: 'تحلیل همه جفت ارزها'
        required: false
        type: boolean
        default: false

env:
  PYTHON_VERSION: '3.12'
  
permissions:
  contents: write
  issues: write
  
jobs:
  forex-analysis:
    runs-on: ubuntu-latest
    timeout-minutes: 45

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Set up Python ${{ env.PYTHON_VERSION }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y python3-pip build-essential jq
        
    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install google-generativeai pandas pandas-ta aiohttp asyncio python-dotenv requests
        
    - name: Run Flexible Forex AI Analysis
      env:
        GOOGLE_API_KEY: ${{ secrets.GOOGLE_API_KEY }}
        TWELVEDATA_API_KEY: ${{ secrets.TWELVEDATA_API_KEY }}
        CLOUDFLARE_AI_API_KEY: ${{ secrets.CLOUDFLARE_AI_API_KEY }}
        CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
        GROQ_API_KEY: ${{ secrets.GROQ_API_KEY }}
      run: |
        echo "🔄 شروع تحلیل فارکس با AI هوشمند و انعطاف‌پذیر..."
        
        # تعیین جفت ارزها بر اساس ورودی
        if [ "${{ github.event.inputs.all_pairs }}" = "true" ]; then
          echo "🔍 تحلیل همه جفت ارزها"
          python flexible_forex_ai.py --all
        elif [ -n "${{ github.event.inputs.pairs }}" ]; then
          echo "🔍 تحلیل جفت ارزهای مشخص شده: ${{ github.event.inputs.pairs }}"
          python flexible_forex_ai.py --pairs "${{ github.event.inputs.pairs }}"
        else
          echo "🔍 تحلیل ۲ جفت ارز اصلی به صورت پیش‌فرض"
          python flexible_forex_ai.py
        fi
        
        echo "✅ تحلیل کامل شد"
        echo "📁 فایل‌های ایجاد شده:"
        ls -la *.json *.log || echo "فایلی یافت نشد"
        
    - name: Commit and Push Results to Repository
      run: |
        echo "📊 بررسی فایل‌های ایجاد شده در root:"
        ls -la *.json *.log 2>/dev/null || echo "⚠️ فایل JSON یا LOG یافت نشد"
        
        # پیکربندی git
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        
        # اضافه کردن تمام فایل‌های سیگنال و لاگ
        git add *.json *.log 2>/dev/null || true
        
        # بررسی تغییرات
        if git status --porcelain | grep -E '\.(json|log)$'; then
          echo "🔄 تغییرات شناسایی شد:"
          git status --porcelain
          
          # ایجاد commit
          git commit -m "📈 به‌روزرسانی سیگنال‌های فارکس - $(date +'%Y-%m-%d %H:%M UTC')"
          
          # push تغییرات
          git push
          echo "✅ فایل‌های سیگنال با موفقیت به ریپو push شدند"
        else
          echo "🔍 هیچ تغییر قابل توجهی در فایل‌ها وجود ندارد"
        fi
        
    - name: Upload results to workflow summary
      run: |
        echo "# 🎯 نتایج تحلیل فارکس AI هوشمند" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**زمان اجرا:** $(date -u +'%Y-%m-%d %H:%M:%S UTC')" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        # بررسی و نمایش فایل‌های موجود
        echo "## 📁 فایل‌های ایجاد شده" >> $GITHUB_STEP_SUMMARY
        echo '```' >> $GITHUB_STEP_SUMMARY
        ls -la *.json *.log 2>/dev/null >> $GITHUB_STEP_SUMMARY || echo "فایلی یافت نشد" >> $GITHUB_STEP_SUMMARY
        echo '```' >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        # نمایش وضعیت مصرف API
        if [ -f "api_usage_tracker.json" ]; then
          echo "## 📊 وضعیت مصرف APIها" >> $GITHUB_STEP_SUMMARY
          echo '```json' >> $GITHUB_STEP_SUMMARY
          cat api_usage_tracker.json >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
        fi
        
        # نمایش سیگنال‌ها
        if [ -f "medium_consensus_signals.json" ] && [ -s "medium_consensus_signals.json" ]; then
          MEDIUM_COUNT=$(jq length medium_consensus_signals.json)
          echo "## 📊 سیگنال‌های با توافق متوسط: $MEDIUM_COUNT" >> $GITHUB_STEP_SUMMARY
          jq -r '.[] | "### \(.SYMBOL) - \(.ACTION) \n- **اعتماد:** \(.CONFIDENCE)/10\n- **توافق:** \(.AGREEMENT_LEVEL)/\(.TOTAL_MODELS)\n- **تحلیل:** \(.ANALYSIS)\n\n"' medium_consensus_signals.json >> $GITHUB_STEP_SUMMARY
        else
          echo "## 📊 سیگنال‌های با توافق متوسط: ۰" >> $GITHUB_STEP_SUMMARY
        fi
        
        if [ -f "strong_consensus_signals.json" ] && [ -s "strong_consensus_signals.json" ]; then
          STRONG_COUNT=$(jq length strong_consensus_signals.json)
          echo "## 🎯 سیگنال‌های با توافق قوی: $STRONG_COUNT" >> $GITHUB_STEP_SUMMARY
          jq -r '.[] | "### \(.SYMBOL) - \(.ACTION) \n- **اعتماد:** \(.CONFIDENCE)/10\n- **توافق:** \(.AGREEMENT_LEVEL)/\(.TOTAL_MODELS)\n- **تحلیل:** \(.ANALYSIS)\n\n"' strong_consensus_signals.json >> $GITHUB_STEP_SUMMARY
        else
          echo "## 🎯 سیگنال‌های با توافق قوی: ۰" >> $GITHUB_STEP_SUMMARY
        fi
        
        if [ -f "weak_consensus_signals.json" ] && [ -s "weak_consensus_signals.json" ]; then
          WEAK_COUNT=$(jq length weak_consensus_signals.json)
          echo "## 📈 سیگنال‌های با توافق ضعیف: $WEAK_COUNT" >> $GITHUB_STEP_SUMMARY
          jq -r '.[] | "### \(.SYMBOL) - \(.ACTION) \n- **اعتماد:** \(.CONFIDENCE)/10\n- **توافق:** \(.AGREEMENT_LEVEL)/\(.TOTAL_MODELS)\n- **تحلیل:** \(.ANALYSIS)\n\n"' weak_consensus_signals.json >> $GITHUB_STEP_SUMMARY
        else
          echo "## 📈 سیگنال‌های با توافق ضعیف: ۰" >> $GITHUB_STEP_SUMMARY
        fi
        
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "---" >> $GITHUB_STEP_SUMMARY
        echo "🤖 *تولید شده توسط سیستم تحلیل فارکس با AI هوشمند و انعطاف‌پذیر*" >> $GITHUB_STEP_SUMMARY

    - name: Create Issue with Results
      if: always()
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          let message = '## 📊 نتایج تحلیل فارکس\n\n';
          
          try {
            // خواندن فایل‌های سیگنال
            const files = ['strong_consensus_signals.json', 'medium_consensus_signals.json', 'weak_consensus_signals.json'];
            let hasSignals = false;
            
            for (const file of files) {
              if (fs.existsSync(file)) {
                const signals = JSON.parse(fs.readFileSync(file, 'utf8'));
                if (signals.length > 0) {
                  hasSignals = true;
                  const type = file.includes('strong') ? 'قوی' : file.includes('medium') ? 'متوسط' : 'ضعیف';
                  message += `### 🎯 سیگنال‌های ${type}: ${signals.length}\n`;
                  
                  signals.forEach(signal => {
                    const icon = signal.ACTION === 'BUY' ? '🟢' : signal.ACTION === 'SELL' ? '🔴' : '⚪';
                    message += `${icon} **${signal.SYMBOL}** - ${signal.ACTION} (اعتماد: ${signal.CONFIDENCE}/10)\n`;
                    message += `   - توافق: ${signal.AGREEMENT_LEVEL}/${signal.TOTAL_MODELS}\n`;
                    message += `   - تحلیل: ${signal.ANALYSIS || 'ندارد'}\n\n`;
                  });
                }
              }
            }
            
            if (!hasSignals) {
              message += '🔍 هیچ سیگنال معاملاتی‌ای شناسایی نشد\n\n';
            }
            
            // اضافه کردن وضعیت API
            if (fs.existsSync('api_usage_tracker.json')) {
              const apiUsage = JSON.parse(fs.readFileSync('api_usage_tracker.json', 'utf8'));
              message += '### 📊 وضعیت مصرف API\n';
              message += '```json\n' + JSON.stringify(apiUsage, null, 2) + '\n```\n';
            }
            
          } catch (error) {
            message += '❌ خطا در خواندن نتایج\n';
            console.error('Error:', error);
          }
          
          // ایجاد issue
          await github.rest.issues.create({
            owner: context.repo.owner,
            repo: context.repo.repo,
            title: `📈 گزارش تحلیل فارکس - ${new Date().toISOString().split('T')[0]}`,
            body: message,
            labels: ['forex-analysis', 'automated']
          });
