name: Forex AI Analysis

on:
  schedule:
    # اجرای هر 2 ساعت در ساعت‌های زوج
    - cron: '0 */2 * * *'
    # اجرای روزانه در ساعت 8 صبح به وقت UTC
    - cron: '0 8 * * *'
  workflow_dispatch:  # امکان اجرای دستی
    inputs:
      pairs:
        description: 'جفت ارزها (جدا شده با کاما)'
        required: false
        default: 'EUR/USD,GBP/USD,USD/JPY'
      all_pairs:
        description: 'تحلیل همه جفت ارزها'
        required: false
        type: boolean
        default: false

env:
  PYTHON_VERSION: '3.12'
  OUTPUT_DIR: 'results'
  
permissions:
  contents: write
  issues: write
  pull-requests: write
  
jobs:
  forex-analysis:
    runs-on: ubuntu-latest
    timeout-minutes: 45

    permissions:
      contents: write
      issues: write
      
    strategy:
      matrix:
        python-version: [3.12]
        
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
        
    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y python3-pip build-essential jq
        
    - name: Cache Python packages
      uses: actions/cache@v4
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
          
    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install google-generativeai pandas pandas-ta aiohttp asyncio python-dotenv requests
        
    - name: Create results directory
      run: mkdir -p ${{ env.OUTPUT_DIR }}
      
    - name: Run Flexible Forex AI Analysis
      env:
        GOOGLE_API_KEY: ${{ secrets.GOOGLE_API_KEY }}
        TWELVEDATA_API_KEY: ${{ secrets.TWELVEDATA_API_KEY }}
        CLOUDFLARE_AI_API_KEY: ${{ secrets.CLOUDFLARE_AI_API_KEY }}
        CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
        GROQ_API_KEY: ${{ secrets.GROQ_API_KEY }}
      run: |
        echo "🔄 شروع تحلیل فارکس با AI هوشمند و انعطاف‌پذیر..."
        echo "📊 وضعیت APIها: Gemini, Cloudflare, Groq"
        
        # تعیین جفت ارزها بر اساس ورودی
        if [ "${{ github.event.inputs.all_pairs }}" = "true" ]; then
          echo "🔍 تحلیل همه جفت ارزها"
          python flexible_forex_ai.py --all
        elif [ -n "${{ github.event.inputs.pairs }}" ]; then
          echo "🔍 تحلیل جفت ارزهای مشخص شده: ${{ github.event.inputs.pairs }}"
          python flexible_forex_ai.py --pairs "${{ github.event.inputs.pairs }}"
        else
          echo "🔍 تحلیل ۲ جفت ارز اصلی به صورت پیش‌فرض"
          python flexible_forex_ai.py
        fi
        
        echo "✅ تحلیل کامل شد"
        
    - name: Archive results
      uses: actions/upload-artifact@v4
      with:
        name: forex-signals-${{ github.run_id }}-${{ github.run_attempt }}
        path: |
          strong_consensus_signals.json
          medium_consensus_signals.json
          weak_consensus_signals.json
          trading_log.log
          signal_cache.json
          api_usage_tracker.json
        retention-days: 30
        if-no-files-found: warn
        
    - name: Upload results to workflow summary
      run: |
        echo "# 🎯 نتایج تحلیل فارکس AI هوشمند" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**زمان اجرا:** $(date -u +'%Y-%m-%d %H:%M:%S UTC')" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        # نمایش وضعیت مصرف API
        if [ -f "api_usage_tracker.json" ]; then
          echo "## 📊 وضعیت مصرف APIها" >> $GITHUB_STEP_SUMMARY
          echo '```json' >> $GITHUB_STEP_SUMMARY
          cat api_usage_tracker.json >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
        fi
        
        # بررسی وجود فایل‌های سیگنال و نمایش خلاصه
        if [ -f "strong_consensus_signals.json" ] && [ -s "strong_consensus_signals.json" ]; then
          STRONG_COUNT=$(jq length strong_consensus_signals.json)
          echo "## 🎯 سیگنال‌های با توافق قوی: $STRONG_COUNT" >> $GITHUB_STEP_SUMMARY
          jq -r '.[] | "### \(.SYMBOL) - \(.ACTION) \n- **اعتماد:** \(.CONFIDENCE)/10\n- **توافق:** \(.AGREEMENT_LEVEL)/\(.TOTAL_MODELS)\n- **سطح ورود:** \(.ENTRY_ZONE)\n- **حد ضرر:** \(.STOP_LOSS)\n- **حد سود:** \(.TAKE_PROFIT)\n- **نسبت سود به زیان:** \(.RISK_REWARD_RATIO)\n- **انقضا:** \(.EXPIRATION_H) ساعت\n- **تحلیل:** \(.ANALYSIS)\n- **مدل‌های موافق:** \(.VALID_MODELS) از \(.TOTAL_MODELS)\n\n"' strong_consensus_signals.json >> $GITHUB_STEP_SUMMARY
        else
          echo "## 🎯 سیگنال‌های با توافق قوی: ۰" >> $GITHUB_STEP_SUMMARY
        fi
        
        if [ -f "medium_consensus_signals.json" ] && [ -s "medium_consensus_signals.json" ]; then
          MEDIUM_COUNT=$(jq length medium_consensus_signals.json)
          echo "## 📊 سیگنال‌های با توافق متوسط: $MEDIUM_COUNT" >> $GITHUB_STEP_SUMMARY
          jq -r '.[] | "### \(.SYMBOL) - \(.ACTION) \n- **اعتماد:** \(.CONFIDENCE)/10\n- **توافق:** \(.AGREEMENT_LEVEL)/\(.TOTAL_MODELS)\n- **تحلیل:** \(.ANALYSIS)\n\n"' medium_consensus_signals.json >> $GITHUB_STEP_SUMMARY
        else
          echo "## 📊 سیگنال‌های با توافق متوسط: ۰" >> $GITHUB_STEP_SUMMARY
        fi
        
        if [ -f "weak_consensus_signals.json" ] && [ -s "weak_consensus_signals.json" ]; then
          WEAK_COUNT=$(jq length weak_consensus_signals.json)
          echo "## 📈 سیگنال‌های با توافق ضعیف: $WEAK_COUNT" >> $GITHUB_STEP_SUMMARY
          jq -r '.[] | "### \(.SYMBOL) - \(.ACTION) \n- **اعتماد:** \(.CONFIDENCE)/10\n- **توافق:** \(.AGREEMENT_LEVEL)/\(.TOTAL_MODELS)\n- **تحلیل:** \(.ANALYSIS)\n\n"' weak_consensus_signals.json >> $GITHUB_STEP_SUMMARY
        else
          echo "## 📈 سیگنال‌های با توافق ضعیف: ۰" >> $GITHUB_STEP_SUMMARY
        fi
        
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "---" >> $GITHUB_STEP_SUMMARY
        echo "🤖 *تولید شده توسط سیستم تحلیل فارکس با AI هوشمند و انعطاف‌پذیر*" >> $GITHUB_STEP_SUMMARY
        echo "🔄 *مدیریت خودکار APIها: Gemini, Cloudflare, Groq*" >> $GITHUB_STEP_SUMMARY

    - name: Commit and Push Results to Repository
      run: |
        # پیکربندی git
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        
        # بررسی تغییرات در فایل‌های سیگنال
        if git diff --name-only | grep -E '(strong_consensus_signals|medium_consensus_signals|weak_consensus_signals|api_usage_tracker)\.json'; then
          echo "🔄 تغییرات در فایل‌های سیگنال شناسایی شد"
          
          # اضافه کردن فایل‌های سیگنال
          git add strong_consensus_signals.json medium_consensus_signals.json weak_consensus_signals.json api_usage_tracker.json trading_log.log
          
          # ایجاد commit
          git commit -m "📈 به‌روزرسانی سیگنال‌های فارکس - $(date +'%Y-%m-%d %H:%M')"
          
          # push تغییرات
          git push
          
          echo "✅ فایل‌های سیگنال با موفقیت به ریپو push شدند"
        else
          echo "🔍 هیچ تغییر قابل توجهی در فایل‌های سیگنال وجود ندارد"
        fi
        
    - name: Send success notification
      if: success()
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          
          let message = '✅ تحلیل فارکس با موفقیت انجام شد\\n\\n';
          let hasSignals = false;
          
          // خواندن وضعیت مصرف API
          try {
            if (fs.existsSync('api_usage_tracker.json')) {
              const apiUsage = JSON.parse(fs.readFileSync('api_usage_tracker.json', 'utf8'));
              message += '📊 **وضعیت مصرف API:**\\n';
              for (const [provider, data] of Object.entries(apiUsage.providers)) {
                const remaining = data.limit - data.used_today;
                message += `• ${provider}: ${data.used_today}/${data.limit} (${remaining} باقیمانده)\\n`;
              }
              message += '\\n';
            }
          } catch (error) {
            console.log('خطا در خواندن وضعیت API:', error);
          }
          
          // خواندن فایل‌های سیگنال
          try {
            if (fs.existsSync('strong_consensus_signals.json')) {
              const strongSignals = JSON.parse(fs.readFileSync('strong_consensus_signals.json', 'utf8'));
              if (strongSignals.length > 0) {
                hasSignals = true;
                message += `🎯 **سیگنال‌های قوی:** ${strongSignals.length}\\n`;
                strongSignals.forEach(signal => {
                  const actionIcon = signal.ACTION === 'BUY' ? '🟢' : signal.ACTION === 'SELL' ? '🔴' : '⚪';
                  message += `${actionIcon} ${signal.SYMBOL} - ${signal.ACTION} (اعتماد: ${signal.CONFIDENCE}/10, توافق: ${signal.AGREEMENT_LEVEL}/${signal.TOTAL_MODELS})\\n`;
                });
                message += '\\n';
              }
            }
            
            if (fs.existsSync('medium_consensus_signals.json')) {
              const mediumSignals = JSON.parse(fs.readFileSync('medium_consensus_signals.json', 'utf8'));
              if (mediumSignals.length > 0) {
                hasSignals = true;
                message += `📊 **سیگنال‌های متوسط:** ${mediumSignals.length}\\n`;
                mediumSignals.forEach(signal => {
                  const actionIcon = signal.ACTION === 'BUY' ? '🟢' : signal.ACTION === 'SELL' ? '🔴' : '⚪';
                  message += `${actionIcon} ${signal.SYMBOL} - ${signal.ACTION} (اعتماد: ${signal.CONFIDENCE}/10)\\n`;
                });
                message += '\\n';
              }
            }
            
            if (fs.existsSync('weak_consensus_signals.json')) {
              const weakSignals = JSON.parse(fs.readFileSync('weak_consensus_signals.json', 'utf8'));
              if (weakSignals.length > 0) {
                hasSignals = true;
                message += `📈 **سیگنال‌های ضعیف:** ${weakSignals.length}\\n`;
                weakSignals.forEach(signal => {
                  const actionIcon = signal.ACTION === 'BUY' ? '🟢' : signal.ACTION === 'SELL' ? '🔴' : '⚪';
                  message += `${actionIcon} ${signal.SYMBOL} - ${signal.ACTION}\\n`;
                });
              }
            }
            
            if (!hasSignals) {
              message += '🔍 **هیچ سیگنال معاملاتی‌ای شناسایی نشد**\\n';
            }
            
          } catch (error) {
            message += '📝 **خطا در خواندن نتایج**\\n';
            console.log('خطا در خواندن سیگنال‌ها:', error);
          }
          
          // ایجاد issue برای لاگ‌گیری
          github.rest.issues.create({
            owner: context.repo.owner,
            repo: context.repo.repo,
            title: `📈 گزارش تحلیل فارکس - ${new Date().toISOString().split('T')[0]}`,
            body: message,
            labels: ['forex-analysis', 'automated']
          });

  cleanup:
    runs-on: ubuntu-latest
    if: always()
    
    steps:
    - name: Cleanup old artifacts
      uses: actions/github-script@v7
      with:
        script: |
          const { data: artifacts } = await github.rest.actions.listArtifactsForRepo({
            owner: context.repo.owner,
            repo: context.repo.repo,
            per_page: 100
          });
          
          const now = Date.now();
          const retentionDays = 7; // حذف آرتیفکت‌های قدیمی‌تر از 7 روز
          const retentionTime = retentionDays * 24 * 60 * 60 * 1000;
          
          for (const artifact of artifacts.artifacts) {
            const createdAt = new Date(artifact.created_at).getTime();
            if (now - createdAt > retentionTime) {
              console.log(`Deleting old artifact: ${artifact.name}`);
              await github.rest.actions.deleteArtifact({
                owner: context.repo.owner,
                repo: context.repo.repo,
                artifact_id: artifact.id
              });
            }
          }
